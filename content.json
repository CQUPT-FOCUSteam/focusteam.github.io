{"pages":[{"title":"关于","text":"团队是 FOCUS team： FOCUS team成立于2018年，来自重庆邮电大学，以“ F - Friendly友爱、O - Optimistic乐观、C - Cooperation合作、U - Unique独特、S - Smart明智 ”为核心理念，为丰富学生的“大学生活和学习途径”为愿景，提供“良好学习环境、全方位服务、优势资源支持”，优先满足学生的学习需求，让学生“学有所思、学有所悟、学有所获、学有所成”为目标。我们现有LearningYard学苑公众号、LightHouse智能驿站、ExpressSimulation递仿、EasyEdu易尚学、KeyIntell玥慧咨询、BookShare书享、Agorin农订等项目，与伙伴开放合作，持续为学生创造价值，释放个人潜能，丰富学生生活，激发组织创新。FOCUS team坚持以“分享兴趣，传播快乐，增长见闻，留下美好”为宗旨，光阴易逝，年华易老，趁着年少努力学习，不浪费一寸光阴！","link":"/about/index.html"}],"posts":[{"title":"Agorin农订 - 分类文章示例","text":"这里是 Agorin农订 分类板块的示例文章。","link":"/2020/02/28/Agorin%E5%86%9C%E8%AE%A2-%E5%88%86%E7%B1%BB%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"},{"title":"BookShare书享 - 分类文章示例","text":"这里是 BookShare书享 分类板块的示例文章。","link":"/2020/02/28/BookShare%E4%B9%A6%E4%BA%AB-%E5%88%86%E7%B1%BB%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"},{"title":"ExpressSimulation递仿 - 分类文章示例","text":"这里是 ExpressSimulation递仿 分类板块的示例文章。","link":"/2020/02/28/ExpressSimulation%E9%80%92%E4%BB%BF-%E5%88%86%E7%B1%BB%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"},{"title":"EasyEdu易尚学 - 分类文章示例","text":"这里是 EasyEdu易尚学 分类板块的示例文章。","link":"/2020/02/28/EasyEdu%E6%98%93%E5%B0%9A%E5%AD%A6-%E5%88%86%E7%B1%BB%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"},{"title":"LightHouse驿站 - 分类文章示例","text":"这里是 LightHouse驿站 分类板块的示例文章。","link":"/2020/02/28/LightHouse%E9%A9%BF%E7%AB%99-%E5%88%86%E7%B1%BB%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"},{"title":"KeyIntell钥慧咨询 - 分类文章示例","text":"这里是 KeyIntell钥慧咨询 分类板块的示例文章。","link":"/2020/02/28/KeyIntell%E9%92%A5%E6%85%A7%E5%92%A8%E8%AF%A2-%E5%88%86%E7%B1%BB%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"},{"title":"LearningYard学苑 - 分类文章示例","text":"这里是 LearningYard学苑 分类板块的示例文章。","link":"/2020/02/28/LearningYard%E5%AD%A6%E8%8B%91-%E5%88%86%E7%B1%BB%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"},{"title":"LearningYard 博客网站开发机迁移及文章发布教程","text":"本篇教程将详细介绍 LearningYard 博客网站开发机的迁移流程(从 0 开始)，以及编写和发布文章的相关须知。 安装 gitWindows主页地址：https://git-scm.com/ 双击根据指引猛点下一步安装 Linux使用系统自带的包管理工具进行安装(如果速度太慢可以加代理或更换国内镜像源) 执行命令(Ubuntu)： 1sudo apt update &amp;&amp; sudo apt install -y git 执行命令(CentOS)： 1sudo yum -y update &amp;&amp; sudo yum install -y git Mac使用 home-brew 包管理工具安装 执行命令： 1brew update &amp;&amp; brew install git 安装 Node.js 和 npmWindows下载地址：https://nodejs.org/dist/v12.15.0/node-v12.15.0-x86.msi 双击根据指引猛点下一步安装 Linux(二选一，推荐方法2) 通过源码编译安装 下载地址：https://nodejs.org/dist/v12.15.0/node-v12.15.0.tar.gz 执行命令： 1sudo mkdir -p /usr/local/nodejs &amp;&amp; cd ~/Downloads/ &amp;&amp; wget https://nodejs.org/dist/v12.15.0/node-v12.15.0.tar.gz &amp;&amp; tar -zxvf node-v12.15.0.tar.gz &amp;&amp; cd node-v12.15.0 &amp;&amp; ./configure --prefix=/usr/local/nodejs/ &amp;&amp; sudo make &amp;&amp; sudo make install &amp;&amp; cd .. &amp;&amp; rm -rf node-v12.15.0.tar.gz &amp;&amp; rm -rf node-v12.15.0 设置环境变量： 123echo 'export NODE_HOME=/usr/local/nodejs/bin' &gt;&gt; ~/.bashrcecho 'export PATH=$NODE_HOME:$PATH' &gt;&gt; ~/.bashrcsource ~/.bashrc 直接安装编译好的二进制包 下载地址：https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz 执行命令： 1cd ~/Downloads/ &amp;&amp; wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz &amp;&amp; sudo tar xvJf node-v12.15.0-linux-x64.tar.xz -C /usr/local/ 设置环境变量： 123echo 'export NODE_HOME=/usr/local/node-v12.15.0-linux-x64/bin' &gt;&gt; ~/.bashrcecho 'export PATH=$NODE_HOME:$PATH' &gt;&gt; ~/.bashrcsource ~/.bashrc 删除压缩包： 1rm -rf ~/Downloads/node-v12.15.0-linux-x64.tar.xz Mac下载地址：https://nodejs.org/dist/v12.15.0/node-v12.15.0.pkg 双击根据指引安装 安装 hexo执行命令： 1npm install -g hexo-cli Linux 和 Mac 用户如遇到权限问题请额外执行命令： 1sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share} 设置 git 全局信息执行命令： 12git config --global user.name \"填你的 github 名字(带上两端的双引号)\"git config --global user.email \"填你的 github 关联邮箱(带上了两端的双引号)\" 设置 git 的 ssh 认证公钥执行命令： 1ssh-keygen -t rsa -C \"填你的 github 关联邮箱(带上了两端的双引号)\" 什么都不需要输入，一路回车到命令执行结束，接着： Linux 和 Mac 用户请执行命令： 1cat ~/.ssh/id_rsa.pub Windows 用户请到如图所示的红框内的地址中寻找 id_rsa.pub 文件并用记事本打开： 将打印的值完整的复制，以 ssh-rsa 开头，以 你输入的邮箱 结尾，全部完整的复制，打开你的 github 主页 ，点击右上角头像，选择 Settings 选项，如图： 进入到用户设置界面后，点击左侧红框内的 SSH and GPG keys 按钮，进入到右侧 SSH keys 编辑界面，如下图所示： 点击上图中右上角蓝色框内的 New SSH key 按钮，进入到新增 ssh key 的界面，如下图所示： 在 Title 单行文本框内随意输入一个字符串，最好用于标示你的计算机，接着，在下方 Key 多行文本框内填写刚才复制的 id_rsa.pub 文件的内容，最后点击下方的 Add SSH key 按钮完成公钥的添加。 执行命令以验证配置结果： 1ssh -T git@github.com 如果出现下图所示的输出，则表示配置成功： 向 LearningYard/learningyard.github.io 仓库管理员申请开放合作权限需要向 LearningYard 仓库管理员提供自己的 GitHub账号名称 ，仓库管理员操作如下所示： 登陆管理员的 GitHub 账号； 进入该仓库主页，链接：https://github.com/LearningYard/learningyard.github.io； 在页面中部找到如下图所示的部分，点击红色框内的 Settings 按钮： 进入仓库设置部分后，点击左边列表的 Manage access 选项，进入管理权限设置界面，如下图所示： 点击上图右侧红框内的 Invite a collaborator 按钮，输入本节开头别人提供的 GitHub 账号进行搜索，确认后添加，如下图所示： 被邀请者需要去自己 GitHub 绑定的邮箱内查收一封带有邀请链接的邮件，并点击链接进行确认，完成合作者的添加，至此便有权限通过自己的 GitHub 账号为 LearningYard 项目提交代码。 在一台新计算机上复建 LearningYard 博客网站开发环境和配置 将 LearningYard/learningyard.github.io 仓库克隆到本地： 执行命令： 1git clone git@github.com:LearningYard/learningyard.github.io.git -b dev &amp;&amp; cd learningyard.github.io 使用 hexo 生成静态文件： 执行命令： 1hexo g 使用 hexo 自带服务器模块预览： 执行命令： 1hexo s hexo 将会在本地启动，并监听默认的 4000 端口，如下图所示： 打开浏览器，访问地址 http://localhost:4000 将会看到和 https://www.learningyard.xyz 网站一样的内容； 若一切看起来正常，则回到命令行界面，按下 Ctrl + C 组合键可以停止 hexo 服务器，这也意味着开发环境的复建顺利完成。 添加新文章并上传 进入到本地我们克隆的开发目录 learningyard.github.io 下； 执行命令： 1hexo new post \"你要新建的文章的文件名，即 .md 文件的文件名，最好是英文，例如 tutorial，不需要 .md 后缀\" 该命令会在 learningyard.github.io/source/_post/ 路径下生成同名的 markdown 文件，例如本文是这样生成的： 1hexo new post \"tutorial\" 进入到 learningyard.github.io/source/_post/ 路径下便会发现一个名为 tutorial.md 的 markdown 文件； 用 markdown 编辑器打开刚才新建的 .md 文件，这里推荐使用 Typora 。会看到新建的文件里包含一定的信息，如下图所示： 如上图所示，文件顶部是一个 YAML 头，这个头包含了文件的一些基本信息供 hexo 生成静态文件时使用，这里包含了三个字段，分别是 title 、date 、tags 。 首先我们需要将 title 字段的内容改为我们文章真正的标题； 其次，date 字段表示的是文章生成的时间，这个改不改都无所谓，但 hexo 会按照此时间将所有文章排序生成归档，如果没有特殊需求的话一般不做改动； 接着，为了方便读者对文章进行查找，我们需要给文章归类以及添加标签，这就需要添加和修改 categories 和 tags 两个字段了，既然是字段名是复数，那单个字段肯定可以有多个值，这里需要注意： ​ 1⃣️ 如果单个字段要填入多个值，那么这些值需要用一对方括号 [] 包裹，不同值之间通过英文逗号 , 间隔，如 categories: [tutorials,test]； ​ 2⃣️ 如果为 categories 字段添加多个值，那么这些值将按顺序逐级下沉，后一个值会成为前一个值的子分类，如下图所示： ​ 3⃣️ 如果为 tags 字段添加多个值，那么这些值是同级的，如下图所示： 最后，为了美观，我们可能会想给文章加个封面图，这里就需要用到 thumbnail 这个字段了，在该字段中填入需要作为封面的图的地址便可以了。 本文的 YAML 头如下图所示，以供参考： 头写完了，下面就该写文章主体部分了，这里就不详细介绍了，请参考 markdown 语法。 在写完了文章后，我们希望能在博客中预览整体效果，同样的，请回到本地 learningyard.github.io 这个目录下，执行命令： 1hexo g 以将 markdown 文件转变成静态的 html 文件，接着，执行命令： 1hexo s 启动 hexo 自带的服务器模块，在浏览器中预览。 在本地预览感觉满意后，我们希望能将文章发布到真正的博客服务器上，供更多的人阅读，这里就需要执行命令： 1hexo d hexo 将利用 git 工具将生成的静态 html 文件和相关资源同步到远端的 GitHub 仓库中，也就是 LearningYard/learningyard.github.io 仓库中，GitHub Page 将根据仓库内容的改变自动更新，稍等几分钟便可以通过访问域名 https://www.learningyard.xyz 的方式正式访问到更新的文章资源了。 同步完了静态资源，别忘了把刚刚辛苦编写的 markdown 源文件也同步到仓库中，便于下次复建开发环境，这里我已经在仓库中新建了一个 dev 分支，用于存放开发资源，而生成的静态资源会默认提交到仓库的 master 分支。静态资源的同步交给 hexo d 命令来做，源文件的同步则需要执行下面的命令： 123git add .git commit -m \"这里简单描述一下做了哪些更新，比如：新增了 xxx.md 文件\"git push 这样，便完成了源文件和开发环境的同步。 以上。","link":"/2020/03/07/blog-develop-tutorial/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"}],"categories":[{"name":"Agorin农订","slug":"nd","link":"/categories/nd/"},{"name":"BookShare书享","slug":"sx","link":"/categories/sx/"},{"name":"ExpressSimulation递仿","slug":"df","link":"/categories/df/"},{"name":"EasyEdu易尚学","slug":"ysx","link":"/categories/ysx/"},{"name":"LightHouse驿站","slug":"yz","link":"/categories/yz/"},{"name":"KeyIntell钥慧咨询","slug":"yhzx","link":"/categories/yhzx/"},{"name":"LearningYard学苑","slug":"xy","link":"/categories/xy/"},{"name":"tutorials","slug":"tutorials","link":"/categories/tutorials/"}]}